/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.com.github.bohunn;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RelationItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6863470312477848767L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RelationItem\",\"namespace\":\"avro.com.github.bohunn\",\"fields\":[{\"name\":\"relationType\",\"type\":{\"type\":\"enum\",\"name\":\"RelationType\",\"doc\":\"RO - Registered Owner, AO - Account Owner, IO - Issuer\",\"symbols\":[\"RO\",\"AO\",\"IO\"],\"default\":\"AO\"},\"doc\":\"Relation Type\"},{\"name\":\"personObjId\",\"type\":\"long\",\"doc\":\"obj_person id of a related person\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid from date\"},{\"name\":\"validTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid to date\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RelationItem> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RelationItem> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RelationItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RelationItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RelationItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RelationItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RelationItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RelationItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RelationItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Relation Type */
  private avro.com.github.bohunn.RelationType relationType;
  /** obj_person id of a related person */
  private long personObjId;
  /** relation valid from date */
  private java.lang.String validFrom;
  /** relation valid to date */
  private java.lang.String validTo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RelationItem() {}

  /**
   * All-args constructor.
   * @param relationType Relation Type
   * @param personObjId obj_person id of a related person
   * @param validFrom relation valid from date
   * @param validTo relation valid to date
   */
  public RelationItem(avro.com.github.bohunn.RelationType relationType, java.lang.Long personObjId, java.lang.String validFrom, java.lang.String validTo) {
    this.relationType = relationType;
    this.personObjId = personObjId;
    this.validFrom = validFrom;
    this.validTo = validTo;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return relationType;
    case 1: return personObjId;
    case 2: return validFrom;
    case 3: return validTo;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: relationType = (avro.com.github.bohunn.RelationType)value$; break;
    case 1: personObjId = (java.lang.Long)value$; break;
    case 2: validFrom = value$ != null ? value$.toString() : null; break;
    case 3: validTo = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'relationType' field.
   * @return Relation Type
   */
  public avro.com.github.bohunn.RelationType getRelationType() {
    return relationType;
  }


  /**
   * Sets the value of the 'relationType' field.
   * Relation Type
   * @param value the value to set.
   */
  public void setRelationType(avro.com.github.bohunn.RelationType value) {
    this.relationType = value;
  }

  /**
   * Gets the value of the 'personObjId' field.
   * @return obj_person id of a related person
   */
  public long getPersonObjId() {
    return personObjId;
  }


  /**
   * Sets the value of the 'personObjId' field.
   * obj_person id of a related person
   * @param value the value to set.
   */
  public void setPersonObjId(long value) {
    this.personObjId = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return relation valid from date
   */
  public java.lang.String getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * relation valid from date
   * @param value the value to set.
   */
  public void setValidFrom(java.lang.String value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return relation valid to date
   */
  public java.lang.String getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * relation valid to date
   * @param value the value to set.
   */
  public void setValidTo(java.lang.String value) {
    this.validTo = value;
  }

  /**
   * Creates a new RelationItem RecordBuilder.
   * @return A new RelationItem RecordBuilder
   */
  public static avro.com.github.bohunn.RelationItem.Builder newBuilder() {
    return new avro.com.github.bohunn.RelationItem.Builder();
  }

  /**
   * Creates a new RelationItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RelationItem RecordBuilder
   */
  public static avro.com.github.bohunn.RelationItem.Builder newBuilder(avro.com.github.bohunn.RelationItem.Builder other) {
    if (other == null) {
      return new avro.com.github.bohunn.RelationItem.Builder();
    } else {
      return new avro.com.github.bohunn.RelationItem.Builder(other);
    }
  }

  /**
   * Creates a new RelationItem RecordBuilder by copying an existing RelationItem instance.
   * @param other The existing instance to copy.
   * @return A new RelationItem RecordBuilder
   */
  public static avro.com.github.bohunn.RelationItem.Builder newBuilder(avro.com.github.bohunn.RelationItem other) {
    if (other == null) {
      return new avro.com.github.bohunn.RelationItem.Builder();
    } else {
      return new avro.com.github.bohunn.RelationItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for RelationItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RelationItem>
    implements org.apache.avro.data.RecordBuilder<RelationItem> {

    /** Relation Type */
    private avro.com.github.bohunn.RelationType relationType;
    /** obj_person id of a related person */
    private long personObjId;
    /** relation valid from date */
    private java.lang.String validFrom;
    /** relation valid to date */
    private java.lang.String validTo;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.com.github.bohunn.RelationItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.relationType)) {
        this.relationType = data().deepCopy(fields()[0].schema(), other.relationType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.personObjId)) {
        this.personObjId = data().deepCopy(fields()[1].schema(), other.personObjId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[2].schema(), other.validFrom);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.validTo)) {
        this.validTo = data().deepCopy(fields()[3].schema(), other.validTo);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RelationItem instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.com.github.bohunn.RelationItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.relationType)) {
        this.relationType = data().deepCopy(fields()[0].schema(), other.relationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.personObjId)) {
        this.personObjId = data().deepCopy(fields()[1].schema(), other.personObjId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[2].schema(), other.validFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validTo)) {
        this.validTo = data().deepCopy(fields()[3].schema(), other.validTo);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'relationType' field.
      * Relation Type
      * @return The value.
      */
    public avro.com.github.bohunn.RelationType getRelationType() {
      return relationType;
    }


    /**
      * Sets the value of the 'relationType' field.
      * Relation Type
      * @param value The value of 'relationType'.
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder setRelationType(avro.com.github.bohunn.RelationType value) {
      validate(fields()[0], value);
      this.relationType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'relationType' field has been set.
      * Relation Type
      * @return True if the 'relationType' field has been set, false otherwise.
      */
    public boolean hasRelationType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'relationType' field.
      * Relation Type
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder clearRelationType() {
      relationType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personObjId' field.
      * obj_person id of a related person
      * @return The value.
      */
    public long getPersonObjId() {
      return personObjId;
    }


    /**
      * Sets the value of the 'personObjId' field.
      * obj_person id of a related person
      * @param value The value of 'personObjId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder setPersonObjId(long value) {
      validate(fields()[1], value);
      this.personObjId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personObjId' field has been set.
      * obj_person id of a related person
      * @return True if the 'personObjId' field has been set, false otherwise.
      */
    public boolean hasPersonObjId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'personObjId' field.
      * obj_person id of a related person
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder clearPersonObjId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * relation valid from date
      * @return The value.
      */
    public java.lang.String getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * relation valid from date
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder setValidFrom(java.lang.String value) {
      validate(fields()[2], value);
      this.validFrom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * relation valid from date
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * relation valid from date
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder clearValidFrom() {
      validFrom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * relation valid to date
      * @return The value.
      */
    public java.lang.String getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * relation valid to date
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder setValidTo(java.lang.String value) {
      validate(fields()[3], value);
      this.validTo = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * relation valid to date
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validTo' field.
      * relation valid to date
      * @return This builder.
      */
    public avro.com.github.bohunn.RelationItem.Builder clearValidTo() {
      validTo = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RelationItem build() {
      try {
        RelationItem record = new RelationItem();
        record.relationType = fieldSetFlags()[0] ? this.relationType : (avro.com.github.bohunn.RelationType) defaultValue(fields()[0]);
        record.personObjId = fieldSetFlags()[1] ? this.personObjId : (java.lang.Long) defaultValue(fields()[1]);
        record.validFrom = fieldSetFlags()[2] ? this.validFrom : (java.lang.String) defaultValue(fields()[2]);
        record.validTo = fieldSetFlags()[3] ? this.validTo : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RelationItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<RelationItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RelationItem>
    READER$ = (org.apache.avro.io.DatumReader<RelationItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.relationType.ordinal());

    out.writeLong(this.personObjId);

    out.writeString(this.validFrom);

    out.writeString(this.validTo);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.relationType = avro.com.github.bohunn.RelationType.values()[in.readEnum()];

      this.personObjId = in.readLong();

      this.validFrom = in.readString();

      this.validTo = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.relationType = avro.com.github.bohunn.RelationType.values()[in.readEnum()];
          break;

        case 1:
          this.personObjId = in.readLong();
          break;

        case 2:
          this.validFrom = in.readString();
          break;

        case 3:
          this.validTo = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










