/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.com.github.bohunn;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BpPersonRelationV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5611977696797449738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BpPersonRelationV2\",\"namespace\":\"avro.com.github.bohunn\",\"fields\":[{\"name\":\"personObjId\",\"type\":\"long\",\"doc\":\"obj_person id\"},{\"name\":\"bpObjId\",\"type\":\"long\",\"doc\":\"obj_bp_id\"},{\"name\":\"personNummer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Person Nummer\"},{\"name\":\"bpNummer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"BP Nummer RO\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid from date\"},{\"name\":\"validTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid to date\"},{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BpPersonRelationV2> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BpPersonRelationV2> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BpPersonRelationV2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BpPersonRelationV2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BpPersonRelationV2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BpPersonRelationV2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BpPersonRelationV2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BpPersonRelationV2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BpPersonRelationV2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** obj_person id */
  private long personObjId;
  /** obj_bp_id */
  private long bpObjId;
  /** Person Nummer */
  private java.lang.String personNummer;
  /** BP Nummer RO */
  private java.lang.String bpNummer;
  /** relation valid from date */
  private java.lang.String validFrom;
  /** relation valid to date */
  private java.lang.String validTo;
  private java.lang.String hash;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BpPersonRelationV2() {}

  /**
   * All-args constructor.
   * @param personObjId obj_person id
   * @param bpObjId obj_bp_id
   * @param personNummer Person Nummer
   * @param bpNummer BP Nummer RO
   * @param validFrom relation valid from date
   * @param validTo relation valid to date
   * @param hash The new value for hash
   */
  public BpPersonRelationV2(java.lang.Long personObjId, java.lang.Long bpObjId, java.lang.String personNummer, java.lang.String bpNummer, java.lang.String validFrom, java.lang.String validTo, java.lang.String hash) {
    this.personObjId = personObjId;
    this.bpObjId = bpObjId;
    this.personNummer = personNummer;
    this.bpNummer = bpNummer;
    this.validFrom = validFrom;
    this.validTo = validTo;
    this.hash = hash;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return personObjId;
    case 1: return bpObjId;
    case 2: return personNummer;
    case 3: return bpNummer;
    case 4: return validFrom;
    case 5: return validTo;
    case 6: return hash;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: personObjId = (java.lang.Long)value$; break;
    case 1: bpObjId = (java.lang.Long)value$; break;
    case 2: personNummer = value$ != null ? value$.toString() : null; break;
    case 3: bpNummer = value$ != null ? value$.toString() : null; break;
    case 4: validFrom = value$ != null ? value$.toString() : null; break;
    case 5: validTo = value$ != null ? value$.toString() : null; break;
    case 6: hash = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'personObjId' field.
   * @return obj_person id
   */
  public long getPersonObjId() {
    return personObjId;
  }


  /**
   * Sets the value of the 'personObjId' field.
   * obj_person id
   * @param value the value to set.
   */
  public void setPersonObjId(long value) {
    this.personObjId = value;
  }

  /**
   * Gets the value of the 'bpObjId' field.
   * @return obj_bp_id
   */
  public long getBpObjId() {
    return bpObjId;
  }


  /**
   * Sets the value of the 'bpObjId' field.
   * obj_bp_id
   * @param value the value to set.
   */
  public void setBpObjId(long value) {
    this.bpObjId = value;
  }

  /**
   * Gets the value of the 'personNummer' field.
   * @return Person Nummer
   */
  public java.lang.String getPersonNummer() {
    return personNummer;
  }


  /**
   * Sets the value of the 'personNummer' field.
   * Person Nummer
   * @param value the value to set.
   */
  public void setPersonNummer(java.lang.String value) {
    this.personNummer = value;
  }

  /**
   * Gets the value of the 'bpNummer' field.
   * @return BP Nummer RO
   */
  public java.lang.String getBpNummer() {
    return bpNummer;
  }


  /**
   * Sets the value of the 'bpNummer' field.
   * BP Nummer RO
   * @param value the value to set.
   */
  public void setBpNummer(java.lang.String value) {
    this.bpNummer = value;
  }

  /**
   * Gets the value of the 'validFrom' field.
   * @return relation valid from date
   */
  public java.lang.String getValidFrom() {
    return validFrom;
  }


  /**
   * Sets the value of the 'validFrom' field.
   * relation valid from date
   * @param value the value to set.
   */
  public void setValidFrom(java.lang.String value) {
    this.validFrom = value;
  }

  /**
   * Gets the value of the 'validTo' field.
   * @return relation valid to date
   */
  public java.lang.String getValidTo() {
    return validTo;
  }


  /**
   * Sets the value of the 'validTo' field.
   * relation valid to date
   * @param value the value to set.
   */
  public void setValidTo(java.lang.String value) {
    this.validTo = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public java.lang.String getHash() {
    return hash;
  }


  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(java.lang.String value) {
    this.hash = value;
  }

  /**
   * Creates a new BpPersonRelationV2 RecordBuilder.
   * @return A new BpPersonRelationV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpPersonRelationV2.Builder newBuilder() {
    return new avro.com.github.bohunn.BpPersonRelationV2.Builder();
  }

  /**
   * Creates a new BpPersonRelationV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BpPersonRelationV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpPersonRelationV2.Builder newBuilder(avro.com.github.bohunn.BpPersonRelationV2.Builder other) {
    if (other == null) {
      return new avro.com.github.bohunn.BpPersonRelationV2.Builder();
    } else {
      return new avro.com.github.bohunn.BpPersonRelationV2.Builder(other);
    }
  }

  /**
   * Creates a new BpPersonRelationV2 RecordBuilder by copying an existing BpPersonRelationV2 instance.
   * @param other The existing instance to copy.
   * @return A new BpPersonRelationV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpPersonRelationV2.Builder newBuilder(avro.com.github.bohunn.BpPersonRelationV2 other) {
    if (other == null) {
      return new avro.com.github.bohunn.BpPersonRelationV2.Builder();
    } else {
      return new avro.com.github.bohunn.BpPersonRelationV2.Builder(other);
    }
  }

  /**
   * RecordBuilder for BpPersonRelationV2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BpPersonRelationV2>
    implements org.apache.avro.data.RecordBuilder<BpPersonRelationV2> {

    /** obj_person id */
    private long personObjId;
    /** obj_bp_id */
    private long bpObjId;
    /** Person Nummer */
    private java.lang.String personNummer;
    /** BP Nummer RO */
    private java.lang.String bpNummer;
    /** relation valid from date */
    private java.lang.String validFrom;
    /** relation valid to date */
    private java.lang.String validTo;
    private java.lang.String hash;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.com.github.bohunn.BpPersonRelationV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.personObjId)) {
        this.personObjId = data().deepCopy(fields()[0].schema(), other.personObjId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bpObjId)) {
        this.bpObjId = data().deepCopy(fields()[1].schema(), other.bpObjId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.personNummer)) {
        this.personNummer = data().deepCopy(fields()[2].schema(), other.personNummer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bpNummer)) {
        this.bpNummer = data().deepCopy(fields()[3].schema(), other.bpNummer);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hash)) {
        this.hash = data().deepCopy(fields()[6].schema(), other.hash);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing BpPersonRelationV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.com.github.bohunn.BpPersonRelationV2 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.personObjId)) {
        this.personObjId = data().deepCopy(fields()[0].schema(), other.personObjId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bpObjId)) {
        this.bpObjId = data().deepCopy(fields()[1].schema(), other.bpObjId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.personNummer)) {
        this.personNummer = data().deepCopy(fields()[2].schema(), other.personNummer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bpNummer)) {
        this.bpNummer = data().deepCopy(fields()[3].schema(), other.bpNummer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validFrom)) {
        this.validFrom = data().deepCopy(fields()[4].schema(), other.validFrom);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.validTo)) {
        this.validTo = data().deepCopy(fields()[5].schema(), other.validTo);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hash)) {
        this.hash = data().deepCopy(fields()[6].schema(), other.hash);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'personObjId' field.
      * obj_person id
      * @return The value.
      */
    public long getPersonObjId() {
      return personObjId;
    }


    /**
      * Sets the value of the 'personObjId' field.
      * obj_person id
      * @param value The value of 'personObjId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setPersonObjId(long value) {
      validate(fields()[0], value);
      this.personObjId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'personObjId' field has been set.
      * obj_person id
      * @return True if the 'personObjId' field has been set, false otherwise.
      */
    public boolean hasPersonObjId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'personObjId' field.
      * obj_person id
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearPersonObjId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bpObjId' field.
      * obj_bp_id
      * @return The value.
      */
    public long getBpObjId() {
      return bpObjId;
    }


    /**
      * Sets the value of the 'bpObjId' field.
      * obj_bp_id
      * @param value The value of 'bpObjId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setBpObjId(long value) {
      validate(fields()[1], value);
      this.bpObjId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bpObjId' field has been set.
      * obj_bp_id
      * @return True if the 'bpObjId' field has been set, false otherwise.
      */
    public boolean hasBpObjId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bpObjId' field.
      * obj_bp_id
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearBpObjId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'personNummer' field.
      * Person Nummer
      * @return The value.
      */
    public java.lang.String getPersonNummer() {
      return personNummer;
    }


    /**
      * Sets the value of the 'personNummer' field.
      * Person Nummer
      * @param value The value of 'personNummer'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setPersonNummer(java.lang.String value) {
      validate(fields()[2], value);
      this.personNummer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'personNummer' field has been set.
      * Person Nummer
      * @return True if the 'personNummer' field has been set, false otherwise.
      */
    public boolean hasPersonNummer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'personNummer' field.
      * Person Nummer
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearPersonNummer() {
      personNummer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bpNummer' field.
      * BP Nummer RO
      * @return The value.
      */
    public java.lang.String getBpNummer() {
      return bpNummer;
    }


    /**
      * Sets the value of the 'bpNummer' field.
      * BP Nummer RO
      * @param value The value of 'bpNummer'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setBpNummer(java.lang.String value) {
      validate(fields()[3], value);
      this.bpNummer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bpNummer' field has been set.
      * BP Nummer RO
      * @return True if the 'bpNummer' field has been set, false otherwise.
      */
    public boolean hasBpNummer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bpNummer' field.
      * BP Nummer RO
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearBpNummer() {
      bpNummer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFrom' field.
      * relation valid from date
      * @return The value.
      */
    public java.lang.String getValidFrom() {
      return validFrom;
    }


    /**
      * Sets the value of the 'validFrom' field.
      * relation valid from date
      * @param value The value of 'validFrom'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setValidFrom(java.lang.String value) {
      validate(fields()[4], value);
      this.validFrom = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validFrom' field has been set.
      * relation valid from date
      * @return True if the 'validFrom' field has been set, false otherwise.
      */
    public boolean hasValidFrom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validFrom' field.
      * relation valid from date
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearValidFrom() {
      validFrom = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTo' field.
      * relation valid to date
      * @return The value.
      */
    public java.lang.String getValidTo() {
      return validTo;
    }


    /**
      * Sets the value of the 'validTo' field.
      * relation valid to date
      * @param value The value of 'validTo'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setValidTo(java.lang.String value) {
      validate(fields()[5], value);
      this.validTo = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'validTo' field has been set.
      * relation valid to date
      * @return True if the 'validTo' field has been set, false otherwise.
      */
    public boolean hasValidTo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'validTo' field.
      * relation valid to date
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearValidTo() {
      validTo = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public java.lang.String getHash() {
      return hash;
    }


    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder setHash(java.lang.String value) {
      validate(fields()[6], value);
      this.hash = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpPersonRelationV2.Builder clearHash() {
      hash = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BpPersonRelationV2 build() {
      try {
        BpPersonRelationV2 record = new BpPersonRelationV2();
        record.personObjId = fieldSetFlags()[0] ? this.personObjId : (java.lang.Long) defaultValue(fields()[0]);
        record.bpObjId = fieldSetFlags()[1] ? this.bpObjId : (java.lang.Long) defaultValue(fields()[1]);
        record.personNummer = fieldSetFlags()[2] ? this.personNummer : (java.lang.String) defaultValue(fields()[2]);
        record.bpNummer = fieldSetFlags()[3] ? this.bpNummer : (java.lang.String) defaultValue(fields()[3]);
        record.validFrom = fieldSetFlags()[4] ? this.validFrom : (java.lang.String) defaultValue(fields()[4]);
        record.validTo = fieldSetFlags()[5] ? this.validTo : (java.lang.String) defaultValue(fields()[5]);
        record.hash = fieldSetFlags()[6] ? this.hash : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BpPersonRelationV2>
    WRITER$ = (org.apache.avro.io.DatumWriter<BpPersonRelationV2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BpPersonRelationV2>
    READER$ = (org.apache.avro.io.DatumReader<BpPersonRelationV2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.personObjId);

    out.writeLong(this.bpObjId);

    out.writeString(this.personNummer);

    out.writeString(this.bpNummer);

    out.writeString(this.validFrom);

    out.writeString(this.validTo);

    out.writeString(this.hash);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.personObjId = in.readLong();

      this.bpObjId = in.readLong();

      this.personNummer = in.readString();

      this.bpNummer = in.readString();

      this.validFrom = in.readString();

      this.validTo = in.readString();

      this.hash = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.personObjId = in.readLong();
          break;

        case 1:
          this.bpObjId = in.readLong();
          break;

        case 2:
          this.personNummer = in.readString();
          break;

        case 3:
          this.bpNummer = in.readString();
          break;

        case 4:
          this.validFrom = in.readString();
          break;

        case 5:
          this.validTo = in.readString();
          break;

        case 6:
          this.hash = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










