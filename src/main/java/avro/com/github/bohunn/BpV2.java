/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.com.github.bohunn;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BpV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6744212242596551584L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BpV2\",\"namespace\":\"avro.com.github.bohunn\",\"fields\":[{\"name\":\"objId\",\"type\":\"long\",\"doc\":\"obj_bp id\"},{\"name\":\"bpName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bpNr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"obj_bp key id 11\"},{\"name\":\"mainAddrId\",\"type\":\"long\"},{\"name\":\"domiAddrId\",\"type\":\"long\",\"doc\":\"domicile address obj id -> used only for a final join with personAddr object\"},{\"name\":\"closeDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isMa\",\"type\":\"boolean\"},{\"name\":\"isVip\",\"type\":\"boolean\"},{\"name\":\"isBanklagernd\",\"type\":\"boolean\"},{\"name\":\"isJoint\",\"type\":\"boolean\"},{\"name\":\"registerOwnerId\",\"type\":\"long\",\"doc\":\"Registered Owner Person Id\"},{\"name\":\"relationList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"RelationItem\",\"fields\":[{\"name\":\"relationType\",\"type\":{\"type\":\"enum\",\"name\":\"RelationType\",\"doc\":\"RO - Registered Owner, AO - Account Owner, IO - Issuer\",\"symbols\":[\"RO\",\"AO\",\"IO\"],\"default\":\"AO\"},\"doc\":\"Relation Type\"},{\"name\":\"personObjId\",\"type\":\"long\",\"doc\":\"obj_person id of a related person\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid from date\"},{\"name\":\"validTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid to date\"}]}],\"default\":\"null\"}],\"doc\":\"Bp - Person relation list\"},{\"name\":\"fkPersonId\",\"type\":[\"null\",\"long\"],\"doc\":\"helper obj_person id field for bp-person join operation - set on bp entry split\"},{\"name\":\"force\",\"type\":\"int\",\"doc\":\"technical field to force onbase synchronization\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BpV2> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BpV2> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BpV2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BpV2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BpV2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BpV2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BpV2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BpV2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BpV2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** obj_bp id */
  private long objId;
  private java.lang.String bpName;
  /** obj_bp key id 11 */
  private java.lang.String bpNr;
  private long mainAddrId;
  /** domicile address obj id -> used only for a final join with personAddr object */
  private long domiAddrId;
  private java.lang.String closeDate;
  private boolean isMa;
  private boolean isVip;
  private boolean isBanklagernd;
  private boolean isJoint;
  /** Registered Owner Person Id */
  private long registerOwnerId;
  /** Bp - Person relation list */
  private java.util.List<avro.com.github.bohunn.RelationItem> relationList;
  /** helper obj_person id field for bp-person join operation - set on bp entry split */
  private java.lang.Long fkPersonId;
  /** technical field to force onbase synchronization */
  private int force;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BpV2() {}

  /**
   * All-args constructor.
   * @param objId obj_bp id
   * @param bpName The new value for bpName
   * @param bpNr obj_bp key id 11
   * @param mainAddrId The new value for mainAddrId
   * @param domiAddrId domicile address obj id -> used only for a final join with personAddr object
   * @param closeDate The new value for closeDate
   * @param isMa The new value for isMa
   * @param isVip The new value for isVip
   * @param isBanklagernd The new value for isBanklagernd
   * @param isJoint The new value for isJoint
   * @param registerOwnerId Registered Owner Person Id
   * @param relationList Bp - Person relation list
   * @param fkPersonId helper obj_person id field for bp-person join operation - set on bp entry split
   * @param force technical field to force onbase synchronization
   */
  public BpV2(java.lang.Long objId, java.lang.String bpName, java.lang.String bpNr, java.lang.Long mainAddrId, java.lang.Long domiAddrId, java.lang.String closeDate, java.lang.Boolean isMa, java.lang.Boolean isVip, java.lang.Boolean isBanklagernd, java.lang.Boolean isJoint, java.lang.Long registerOwnerId, java.util.List<avro.com.github.bohunn.RelationItem> relationList, java.lang.Long fkPersonId, java.lang.Integer force) {
    this.objId = objId;
    this.bpName = bpName;
    this.bpNr = bpNr;
    this.mainAddrId = mainAddrId;
    this.domiAddrId = domiAddrId;
    this.closeDate = closeDate;
    this.isMa = isMa;
    this.isVip = isVip;
    this.isBanklagernd = isBanklagernd;
    this.isJoint = isJoint;
    this.registerOwnerId = registerOwnerId;
    this.relationList = relationList;
    this.fkPersonId = fkPersonId;
    this.force = force;
  }


  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return objId;
    case 1: return bpName;
    case 2: return bpNr;
    case 3: return mainAddrId;
    case 4: return domiAddrId;
    case 5: return closeDate;
    case 6: return isMa;
    case 7: return isVip;
    case 8: return isBanklagernd;
    case 9: return isJoint;
    case 10: return registerOwnerId;
    case 11: return relationList;
    case 12: return fkPersonId;
    case 13: return force;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: objId = (java.lang.Long)value$; break;
    case 1: bpName = value$ != null ? value$.toString() : null; break;
    case 2: bpNr = value$ != null ? value$.toString() : null; break;
    case 3: mainAddrId = (java.lang.Long)value$; break;
    case 4: domiAddrId = (java.lang.Long)value$; break;
    case 5: closeDate = value$ != null ? value$.toString() : null; break;
    case 6: isMa = (java.lang.Boolean)value$; break;
    case 7: isVip = (java.lang.Boolean)value$; break;
    case 8: isBanklagernd = (java.lang.Boolean)value$; break;
    case 9: isJoint = (java.lang.Boolean)value$; break;
    case 10: registerOwnerId = (java.lang.Long)value$; break;
    case 11: relationList = (java.util.List<avro.com.github.bohunn.RelationItem>)value$; break;
    case 12: fkPersonId = (java.lang.Long)value$; break;
    case 13: force = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'objId' field.
   * @return obj_bp id
   */
  public long getObjId() {
    return objId;
  }


  /**
   * Sets the value of the 'objId' field.
   * obj_bp id
   * @param value the value to set.
   */
  public void setObjId(long value) {
    this.objId = value;
  }

  /**
   * Gets the value of the 'bpName' field.
   * @return The value of the 'bpName' field.
   */
  public java.lang.String getBpName() {
    return bpName;
  }


  /**
   * Sets the value of the 'bpName' field.
   * @param value the value to set.
   */
  public void setBpName(java.lang.String value) {
    this.bpName = value;
  }

  /**
   * Gets the value of the 'bpNr' field.
   * @return obj_bp key id 11
   */
  public java.lang.String getBpNr() {
    return bpNr;
  }


  /**
   * Sets the value of the 'bpNr' field.
   * obj_bp key id 11
   * @param value the value to set.
   */
  public void setBpNr(java.lang.String value) {
    this.bpNr = value;
  }

  /**
   * Gets the value of the 'mainAddrId' field.
   * @return The value of the 'mainAddrId' field.
   */
  public long getMainAddrId() {
    return mainAddrId;
  }


  /**
   * Sets the value of the 'mainAddrId' field.
   * @param value the value to set.
   */
  public void setMainAddrId(long value) {
    this.mainAddrId = value;
  }

  /**
   * Gets the value of the 'domiAddrId' field.
   * @return domicile address obj id -> used only for a final join with personAddr object
   */
  public long getDomiAddrId() {
    return domiAddrId;
  }


  /**
   * Sets the value of the 'domiAddrId' field.
   * domicile address obj id -> used only for a final join with personAddr object
   * @param value the value to set.
   */
  public void setDomiAddrId(long value) {
    this.domiAddrId = value;
  }

  /**
   * Gets the value of the 'closeDate' field.
   * @return The value of the 'closeDate' field.
   */
  public java.lang.String getCloseDate() {
    return closeDate;
  }


  /**
   * Sets the value of the 'closeDate' field.
   * @param value the value to set.
   */
  public void setCloseDate(java.lang.String value) {
    this.closeDate = value;
  }

  /**
   * Gets the value of the 'isMa' field.
   * @return The value of the 'isMa' field.
   */
  public boolean getIsMa() {
    return isMa;
  }


  /**
   * Sets the value of the 'isMa' field.
   * @param value the value to set.
   */
  public void setIsMa(boolean value) {
    this.isMa = value;
  }

  /**
   * Gets the value of the 'isVip' field.
   * @return The value of the 'isVip' field.
   */
  public boolean getIsVip() {
    return isVip;
  }


  /**
   * Sets the value of the 'isVip' field.
   * @param value the value to set.
   */
  public void setIsVip(boolean value) {
    this.isVip = value;
  }

  /**
   * Gets the value of the 'isBanklagernd' field.
   * @return The value of the 'isBanklagernd' field.
   */
  public boolean getIsBanklagernd() {
    return isBanklagernd;
  }


  /**
   * Sets the value of the 'isBanklagernd' field.
   * @param value the value to set.
   */
  public void setIsBanklagernd(boolean value) {
    this.isBanklagernd = value;
  }

  /**
   * Gets the value of the 'isJoint' field.
   * @return The value of the 'isJoint' field.
   */
  public boolean getIsJoint() {
    return isJoint;
  }


  /**
   * Sets the value of the 'isJoint' field.
   * @param value the value to set.
   */
  public void setIsJoint(boolean value) {
    this.isJoint = value;
  }

  /**
   * Gets the value of the 'registerOwnerId' field.
   * @return Registered Owner Person Id
   */
  public long getRegisterOwnerId() {
    return registerOwnerId;
  }


  /**
   * Sets the value of the 'registerOwnerId' field.
   * Registered Owner Person Id
   * @param value the value to set.
   */
  public void setRegisterOwnerId(long value) {
    this.registerOwnerId = value;
  }

  /**
   * Gets the value of the 'relationList' field.
   * @return Bp - Person relation list
   */
  public java.util.List<avro.com.github.bohunn.RelationItem> getRelationList() {
    return relationList;
  }


  /**
   * Sets the value of the 'relationList' field.
   * Bp - Person relation list
   * @param value the value to set.
   */
  public void setRelationList(java.util.List<avro.com.github.bohunn.RelationItem> value) {
    this.relationList = value;
  }

  /**
   * Gets the value of the 'fkPersonId' field.
   * @return helper obj_person id field for bp-person join operation - set on bp entry split
   */
  public java.lang.Long getFkPersonId() {
    return fkPersonId;
  }


  /**
   * Sets the value of the 'fkPersonId' field.
   * helper obj_person id field for bp-person join operation - set on bp entry split
   * @param value the value to set.
   */
  public void setFkPersonId(java.lang.Long value) {
    this.fkPersonId = value;
  }

  /**
   * Gets the value of the 'force' field.
   * @return technical field to force onbase synchronization
   */
  public int getForce() {
    return force;
  }


  /**
   * Sets the value of the 'force' field.
   * technical field to force onbase synchronization
   * @param value the value to set.
   */
  public void setForce(int value) {
    this.force = value;
  }

  /**
   * Creates a new BpV2 RecordBuilder.
   * @return A new BpV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpV2.Builder newBuilder() {
    return new avro.com.github.bohunn.BpV2.Builder();
  }

  /**
   * Creates a new BpV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BpV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpV2.Builder newBuilder(avro.com.github.bohunn.BpV2.Builder other) {
    if (other == null) {
      return new avro.com.github.bohunn.BpV2.Builder();
    } else {
      return new avro.com.github.bohunn.BpV2.Builder(other);
    }
  }

  /**
   * Creates a new BpV2 RecordBuilder by copying an existing BpV2 instance.
   * @param other The existing instance to copy.
   * @return A new BpV2 RecordBuilder
   */
  public static avro.com.github.bohunn.BpV2.Builder newBuilder(avro.com.github.bohunn.BpV2 other) {
    if (other == null) {
      return new avro.com.github.bohunn.BpV2.Builder();
    } else {
      return new avro.com.github.bohunn.BpV2.Builder(other);
    }
  }

  /**
   * RecordBuilder for BpV2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BpV2>
    implements org.apache.avro.data.RecordBuilder<BpV2> {

    /** obj_bp id */
    private long objId;
    private java.lang.String bpName;
    /** obj_bp key id 11 */
    private java.lang.String bpNr;
    private long mainAddrId;
    /** domicile address obj id -> used only for a final join with personAddr object */
    private long domiAddrId;
    private java.lang.String closeDate;
    private boolean isMa;
    private boolean isVip;
    private boolean isBanklagernd;
    private boolean isJoint;
    /** Registered Owner Person Id */
    private long registerOwnerId;
    /** Bp - Person relation list */
    private java.util.List<avro.com.github.bohunn.RelationItem> relationList;
    /** helper obj_person id field for bp-person join operation - set on bp entry split */
    private java.lang.Long fkPersonId;
    /** technical field to force onbase synchronization */
    private int force;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.com.github.bohunn.BpV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.objId)) {
        this.objId = data().deepCopy(fields()[0].schema(), other.objId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bpName)) {
        this.bpName = data().deepCopy(fields()[1].schema(), other.bpName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bpNr)) {
        this.bpNr = data().deepCopy(fields()[2].schema(), other.bpNr);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mainAddrId)) {
        this.mainAddrId = data().deepCopy(fields()[3].schema(), other.mainAddrId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.domiAddrId)) {
        this.domiAddrId = data().deepCopy(fields()[4].schema(), other.domiAddrId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.closeDate)) {
        this.closeDate = data().deepCopy(fields()[5].schema(), other.closeDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isMa)) {
        this.isMa = data().deepCopy(fields()[6].schema(), other.isMa);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.isVip)) {
        this.isVip = data().deepCopy(fields()[7].schema(), other.isVip);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.isBanklagernd)) {
        this.isBanklagernd = data().deepCopy(fields()[8].schema(), other.isBanklagernd);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.isJoint)) {
        this.isJoint = data().deepCopy(fields()[9].schema(), other.isJoint);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.registerOwnerId)) {
        this.registerOwnerId = data().deepCopy(fields()[10].schema(), other.registerOwnerId);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.relationList)) {
        this.relationList = data().deepCopy(fields()[11].schema(), other.relationList);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.fkPersonId)) {
        this.fkPersonId = data().deepCopy(fields()[12].schema(), other.fkPersonId);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.force)) {
        this.force = data().deepCopy(fields()[13].schema(), other.force);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing BpV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.com.github.bohunn.BpV2 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.objId)) {
        this.objId = data().deepCopy(fields()[0].schema(), other.objId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bpName)) {
        this.bpName = data().deepCopy(fields()[1].schema(), other.bpName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bpNr)) {
        this.bpNr = data().deepCopy(fields()[2].schema(), other.bpNr);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mainAddrId)) {
        this.mainAddrId = data().deepCopy(fields()[3].schema(), other.mainAddrId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.domiAddrId)) {
        this.domiAddrId = data().deepCopy(fields()[4].schema(), other.domiAddrId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.closeDate)) {
        this.closeDate = data().deepCopy(fields()[5].schema(), other.closeDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isMa)) {
        this.isMa = data().deepCopy(fields()[6].schema(), other.isMa);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isVip)) {
        this.isVip = data().deepCopy(fields()[7].schema(), other.isVip);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isBanklagernd)) {
        this.isBanklagernd = data().deepCopy(fields()[8].schema(), other.isBanklagernd);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isJoint)) {
        this.isJoint = data().deepCopy(fields()[9].schema(), other.isJoint);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.registerOwnerId)) {
        this.registerOwnerId = data().deepCopy(fields()[10].schema(), other.registerOwnerId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.relationList)) {
        this.relationList = data().deepCopy(fields()[11].schema(), other.relationList);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.fkPersonId)) {
        this.fkPersonId = data().deepCopy(fields()[12].schema(), other.fkPersonId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.force)) {
        this.force = data().deepCopy(fields()[13].schema(), other.force);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'objId' field.
      * obj_bp id
      * @return The value.
      */
    public long getObjId() {
      return objId;
    }


    /**
      * Sets the value of the 'objId' field.
      * obj_bp id
      * @param value The value of 'objId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setObjId(long value) {
      validate(fields()[0], value);
      this.objId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'objId' field has been set.
      * obj_bp id
      * @return True if the 'objId' field has been set, false otherwise.
      */
    public boolean hasObjId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'objId' field.
      * obj_bp id
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearObjId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bpName' field.
      * @return The value.
      */
    public java.lang.String getBpName() {
      return bpName;
    }


    /**
      * Sets the value of the 'bpName' field.
      * @param value The value of 'bpName'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setBpName(java.lang.String value) {
      validate(fields()[1], value);
      this.bpName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bpName' field has been set.
      * @return True if the 'bpName' field has been set, false otherwise.
      */
    public boolean hasBpName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bpName' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearBpName() {
      bpName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bpNr' field.
      * obj_bp key id 11
      * @return The value.
      */
    public java.lang.String getBpNr() {
      return bpNr;
    }


    /**
      * Sets the value of the 'bpNr' field.
      * obj_bp key id 11
      * @param value The value of 'bpNr'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setBpNr(java.lang.String value) {
      validate(fields()[2], value);
      this.bpNr = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bpNr' field has been set.
      * obj_bp key id 11
      * @return True if the 'bpNr' field has been set, false otherwise.
      */
    public boolean hasBpNr() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bpNr' field.
      * obj_bp key id 11
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearBpNr() {
      bpNr = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainAddrId' field.
      * @return The value.
      */
    public long getMainAddrId() {
      return mainAddrId;
    }


    /**
      * Sets the value of the 'mainAddrId' field.
      * @param value The value of 'mainAddrId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setMainAddrId(long value) {
      validate(fields()[3], value);
      this.mainAddrId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mainAddrId' field has been set.
      * @return True if the 'mainAddrId' field has been set, false otherwise.
      */
    public boolean hasMainAddrId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mainAddrId' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearMainAddrId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'domiAddrId' field.
      * domicile address obj id -> used only for a final join with personAddr object
      * @return The value.
      */
    public long getDomiAddrId() {
      return domiAddrId;
    }


    /**
      * Sets the value of the 'domiAddrId' field.
      * domicile address obj id -> used only for a final join with personAddr object
      * @param value The value of 'domiAddrId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setDomiAddrId(long value) {
      validate(fields()[4], value);
      this.domiAddrId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'domiAddrId' field has been set.
      * domicile address obj id -> used only for a final join with personAddr object
      * @return True if the 'domiAddrId' field has been set, false otherwise.
      */
    public boolean hasDomiAddrId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'domiAddrId' field.
      * domicile address obj id -> used only for a final join with personAddr object
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearDomiAddrId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'closeDate' field.
      * @return The value.
      */
    public java.lang.String getCloseDate() {
      return closeDate;
    }


    /**
      * Sets the value of the 'closeDate' field.
      * @param value The value of 'closeDate'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setCloseDate(java.lang.String value) {
      validate(fields()[5], value);
      this.closeDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'closeDate' field has been set.
      * @return True if the 'closeDate' field has been set, false otherwise.
      */
    public boolean hasCloseDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'closeDate' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearCloseDate() {
      closeDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isMa' field.
      * @return The value.
      */
    public boolean getIsMa() {
      return isMa;
    }


    /**
      * Sets the value of the 'isMa' field.
      * @param value The value of 'isMa'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setIsMa(boolean value) {
      validate(fields()[6], value);
      this.isMa = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isMa' field has been set.
      * @return True if the 'isMa' field has been set, false otherwise.
      */
    public boolean hasIsMa() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isMa' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearIsMa() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isVip' field.
      * @return The value.
      */
    public boolean getIsVip() {
      return isVip;
    }


    /**
      * Sets the value of the 'isVip' field.
      * @param value The value of 'isVip'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setIsVip(boolean value) {
      validate(fields()[7], value);
      this.isVip = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isVip' field has been set.
      * @return True if the 'isVip' field has been set, false otherwise.
      */
    public boolean hasIsVip() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isVip' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearIsVip() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'isBanklagernd' field.
      * @return The value.
      */
    public boolean getIsBanklagernd() {
      return isBanklagernd;
    }


    /**
      * Sets the value of the 'isBanklagernd' field.
      * @param value The value of 'isBanklagernd'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setIsBanklagernd(boolean value) {
      validate(fields()[8], value);
      this.isBanklagernd = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'isBanklagernd' field has been set.
      * @return True if the 'isBanklagernd' field has been set, false otherwise.
      */
    public boolean hasIsBanklagernd() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'isBanklagernd' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearIsBanklagernd() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isJoint' field.
      * @return The value.
      */
    public boolean getIsJoint() {
      return isJoint;
    }


    /**
      * Sets the value of the 'isJoint' field.
      * @param value The value of 'isJoint'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setIsJoint(boolean value) {
      validate(fields()[9], value);
      this.isJoint = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isJoint' field has been set.
      * @return True if the 'isJoint' field has been set, false otherwise.
      */
    public boolean hasIsJoint() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isJoint' field.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearIsJoint() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'registerOwnerId' field.
      * Registered Owner Person Id
      * @return The value.
      */
    public long getRegisterOwnerId() {
      return registerOwnerId;
    }


    /**
      * Sets the value of the 'registerOwnerId' field.
      * Registered Owner Person Id
      * @param value The value of 'registerOwnerId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setRegisterOwnerId(long value) {
      validate(fields()[10], value);
      this.registerOwnerId = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'registerOwnerId' field has been set.
      * Registered Owner Person Id
      * @return True if the 'registerOwnerId' field has been set, false otherwise.
      */
    public boolean hasRegisterOwnerId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'registerOwnerId' field.
      * Registered Owner Person Id
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearRegisterOwnerId() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationList' field.
      * Bp - Person relation list
      * @return The value.
      */
    public java.util.List<avro.com.github.bohunn.RelationItem> getRelationList() {
      return relationList;
    }


    /**
      * Sets the value of the 'relationList' field.
      * Bp - Person relation list
      * @param value The value of 'relationList'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setRelationList(java.util.List<avro.com.github.bohunn.RelationItem> value) {
      validate(fields()[11], value);
      this.relationList = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'relationList' field has been set.
      * Bp - Person relation list
      * @return True if the 'relationList' field has been set, false otherwise.
      */
    public boolean hasRelationList() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'relationList' field.
      * Bp - Person relation list
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearRelationList() {
      relationList = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'fkPersonId' field.
      * helper obj_person id field for bp-person join operation - set on bp entry split
      * @return The value.
      */
    public java.lang.Long getFkPersonId() {
      return fkPersonId;
    }


    /**
      * Sets the value of the 'fkPersonId' field.
      * helper obj_person id field for bp-person join operation - set on bp entry split
      * @param value The value of 'fkPersonId'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setFkPersonId(java.lang.Long value) {
      validate(fields()[12], value);
      this.fkPersonId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'fkPersonId' field has been set.
      * helper obj_person id field for bp-person join operation - set on bp entry split
      * @return True if the 'fkPersonId' field has been set, false otherwise.
      */
    public boolean hasFkPersonId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'fkPersonId' field.
      * helper obj_person id field for bp-person join operation - set on bp entry split
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearFkPersonId() {
      fkPersonId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'force' field.
      * technical field to force onbase synchronization
      * @return The value.
      */
    public int getForce() {
      return force;
    }


    /**
      * Sets the value of the 'force' field.
      * technical field to force onbase synchronization
      * @param value The value of 'force'.
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder setForce(int value) {
      validate(fields()[13], value);
      this.force = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'force' field has been set.
      * technical field to force onbase synchronization
      * @return True if the 'force' field has been set, false otherwise.
      */
    public boolean hasForce() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'force' field.
      * technical field to force onbase synchronization
      * @return This builder.
      */
    public avro.com.github.bohunn.BpV2.Builder clearForce() {
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BpV2 build() {
      try {
        BpV2 record = new BpV2();
        record.objId = fieldSetFlags()[0] ? this.objId : (java.lang.Long) defaultValue(fields()[0]);
        record.bpName = fieldSetFlags()[1] ? this.bpName : (java.lang.String) defaultValue(fields()[1]);
        record.bpNr = fieldSetFlags()[2] ? this.bpNr : (java.lang.String) defaultValue(fields()[2]);
        record.mainAddrId = fieldSetFlags()[3] ? this.mainAddrId : (java.lang.Long) defaultValue(fields()[3]);
        record.domiAddrId = fieldSetFlags()[4] ? this.domiAddrId : (java.lang.Long) defaultValue(fields()[4]);
        record.closeDate = fieldSetFlags()[5] ? this.closeDate : (java.lang.String) defaultValue(fields()[5]);
        record.isMa = fieldSetFlags()[6] ? this.isMa : (java.lang.Boolean) defaultValue(fields()[6]);
        record.isVip = fieldSetFlags()[7] ? this.isVip : (java.lang.Boolean) defaultValue(fields()[7]);
        record.isBanklagernd = fieldSetFlags()[8] ? this.isBanklagernd : (java.lang.Boolean) defaultValue(fields()[8]);
        record.isJoint = fieldSetFlags()[9] ? this.isJoint : (java.lang.Boolean) defaultValue(fields()[9]);
        record.registerOwnerId = fieldSetFlags()[10] ? this.registerOwnerId : (java.lang.Long) defaultValue(fields()[10]);
        record.relationList = fieldSetFlags()[11] ? this.relationList : (java.util.List<avro.com.github.bohunn.RelationItem>) defaultValue(fields()[11]);
        record.fkPersonId = fieldSetFlags()[12] ? this.fkPersonId : (java.lang.Long) defaultValue(fields()[12]);
        record.force = fieldSetFlags()[13] ? this.force : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BpV2>
    WRITER$ = (org.apache.avro.io.DatumWriter<BpV2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BpV2>
    READER$ = (org.apache.avro.io.DatumReader<BpV2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.objId);

    out.writeString(this.bpName);

    out.writeString(this.bpNr);

    out.writeLong(this.mainAddrId);

    out.writeLong(this.domiAddrId);

    if (this.closeDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.closeDate);
    }

    out.writeBoolean(this.isMa);

    out.writeBoolean(this.isVip);

    out.writeBoolean(this.isBanklagernd);

    out.writeBoolean(this.isJoint);

    out.writeLong(this.registerOwnerId);

    if (this.relationList == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.relationList.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (avro.com.github.bohunn.RelationItem e0: this.relationList) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e0.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.fkPersonId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.fkPersonId);
    }

    out.writeInt(this.force);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.objId = in.readLong();

      this.bpName = in.readString();

      this.bpNr = in.readString();

      this.mainAddrId = in.readLong();

      this.domiAddrId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.closeDate = null;
      } else {
        this.closeDate = in.readString();
      }

      this.isMa = in.readBoolean();

      this.isVip = in.readBoolean();

      this.isBanklagernd = in.readBoolean();

      this.isJoint = in.readBoolean();

      this.registerOwnerId = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.relationList = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<avro.com.github.bohunn.RelationItem> a0 = this.relationList;
        if (a0 == null) {
          a0 = new SpecificData.Array<avro.com.github.bohunn.RelationItem>((int)size0, SCHEMA$.getField("relationList").schema().getTypes().get(1));
          this.relationList = a0;
        } else a0.clear();
        SpecificData.Array<avro.com.github.bohunn.RelationItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<avro.com.github.bohunn.RelationItem>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            avro.com.github.bohunn.RelationItem e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e0 = null;
            } else {
              if (e0 == null) {
                e0 = new avro.com.github.bohunn.RelationItem();
              }
              e0.customDecode(in);
            }
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fkPersonId = null;
      } else {
        this.fkPersonId = in.readLong();
      }

      this.force = in.readInt();

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.objId = in.readLong();
          break;

        case 1:
          this.bpName = in.readString();
          break;

        case 2:
          this.bpNr = in.readString();
          break;

        case 3:
          this.mainAddrId = in.readLong();
          break;

        case 4:
          this.domiAddrId = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.closeDate = null;
          } else {
            this.closeDate = in.readString();
          }
          break;

        case 6:
          this.isMa = in.readBoolean();
          break;

        case 7:
          this.isVip = in.readBoolean();
          break;

        case 8:
          this.isBanklagernd = in.readBoolean();
          break;

        case 9:
          this.isJoint = in.readBoolean();
          break;

        case 10:
          this.registerOwnerId = in.readLong();
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.relationList = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<avro.com.github.bohunn.RelationItem> a0 = this.relationList;
            if (a0 == null) {
              a0 = new SpecificData.Array<avro.com.github.bohunn.RelationItem>((int)size0, SCHEMA$.getField("relationList").schema().getTypes().get(1));
              this.relationList = a0;
            } else a0.clear();
            SpecificData.Array<avro.com.github.bohunn.RelationItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<avro.com.github.bohunn.RelationItem>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                avro.com.github.bohunn.RelationItem e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e0 = null;
                } else {
                  if (e0 == null) {
                    e0 = new avro.com.github.bohunn.RelationItem();
                  }
                  e0.customDecode(in);
                }
                a0.add(e0);
              }
            }
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fkPersonId = null;
          } else {
            this.fkPersonId = in.readLong();
          }
          break;

        case 13:
          this.force = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










