/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.ch.tkb.bde;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Either record for BpAddr and PersonAddr records - used in custom join processor */
@org.apache.avro.specific.AvroGenerated
public class BpAddrOrPersonAddrV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4631938362750344401L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BpAddrOrPersonAddrV2\",\"namespace\":\"avro.ch.tkb.bde\",\"doc\":\"Either record for BpAddr and PersonAddr records - used in custom join processor\",\"fields\":[{\"name\":\"personAddr\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JoinedPersonAddrV2\",\"fields\":[{\"name\":\"objPersonId\",\"type\":\"long\",\"doc\":\"obj person id\"},{\"name\":\"objAddrId\",\"type\":\"long\",\"doc\":\"obj addr id\"},{\"name\":\"personName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"personNr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"obj_person key id 807\"},{\"name\":\"domiAddrId\",\"type\":\"long\"},{\"name\":\"narilo\",\"type\":\"boolean\"},{\"name\":\"isBoeko\",\"type\":\"boolean\"},{\"name\":\"legalHold\",\"type\":\"boolean\"},{\"name\":\"addrFull\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"closeDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"force\",\"type\":\"int\",\"doc\":\"technical field to force onbase synchronization\"},{\"name\":\"isEmittent\",\"type\":\"boolean\",\"default\":false},{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"doc\":\"joined person-addr object\"},{\"name\":\"bpAddr\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"JoinedBpAddrV2\",\"fields\":[{\"name\":\"bpObjId\",\"type\":\"long\",\"doc\":\"obj_bp id\"},{\"name\":\"bpName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"bpNr\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"obj_bp key id 11\"},{\"name\":\"closeDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isMa\",\"type\":\"boolean\"},{\"name\":\"isVip\",\"type\":\"boolean\"},{\"name\":\"isBanklagernd\",\"type\":\"boolean\"},{\"name\":\"domiAddrId\",\"type\":\"long\",\"doc\":\"Domicil Address object id\"},{\"name\":\"mainAddrId\",\"type\":\"long\"},{\"name\":\"mainAddresse\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"isJoint\",\"type\":\"boolean\"},{\"name\":\"relationList\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"RelationItem\",\"fields\":[{\"name\":\"relationType\",\"type\":{\"type\":\"enum\",\"name\":\"RelationType\",\"doc\":\"RO - Registered Owner, AO - Account Owner, IO - Issuer\",\"symbols\":[\"RO\",\"AO\",\"IO\"],\"default\":\"AO\"},\"doc\":\"Relation Type\"},{\"name\":\"personObjId\",\"type\":\"long\",\"doc\":\"obj_person id of a related person\"},{\"name\":\"validFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid from date\"},{\"name\":\"validTo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"relation valid to date\"}]}],\"default\":\"null\"}],\"doc\":\"Bp-Person relation list\"},{\"name\":\"force\",\"type\":\"int\",\"doc\":\"technical field to force onbase synchronization\"},{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"doc\":\"joined bp-addr object\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BpAddrOrPersonAddrV2> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BpAddrOrPersonAddrV2> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BpAddrOrPersonAddrV2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BpAddrOrPersonAddrV2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BpAddrOrPersonAddrV2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BpAddrOrPersonAddrV2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BpAddrOrPersonAddrV2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BpAddrOrPersonAddrV2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BpAddrOrPersonAddrV2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** joined person-addr object */
  private avro.ch.tkb.bde.JoinedPersonAddrV2 personAddr;
  /** joined bp-addr object */
  private avro.ch.tkb.bde.JoinedBpAddrV2 bpAddr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BpAddrOrPersonAddrV2() {}

  /**
   * All-args constructor.
   * @param personAddr joined person-addr object
   * @param bpAddr joined bp-addr object
   */
  public BpAddrOrPersonAddrV2(avro.ch.tkb.bde.JoinedPersonAddrV2 personAddr, avro.ch.tkb.bde.JoinedBpAddrV2 bpAddr) {
    this.personAddr = personAddr;
    this.bpAddr = bpAddr;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return personAddr;
    case 1: return bpAddr;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: personAddr = (avro.ch.tkb.bde.JoinedPersonAddrV2)value$; break;
    case 1: bpAddr = (avro.ch.tkb.bde.JoinedBpAddrV2)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'personAddr' field.
   * @return joined person-addr object
   */
  public avro.ch.tkb.bde.JoinedPersonAddrV2 getPersonAddr() {
    return personAddr;
  }


  /**
   * Sets the value of the 'personAddr' field.
   * joined person-addr object
   * @param value the value to set.
   */
  public void setPersonAddr(avro.ch.tkb.bde.JoinedPersonAddrV2 value) {
    this.personAddr = value;
  }

  /**
   * Gets the value of the 'bpAddr' field.
   * @return joined bp-addr object
   */
  public avro.ch.tkb.bde.JoinedBpAddrV2 getBpAddr() {
    return bpAddr;
  }


  /**
   * Sets the value of the 'bpAddr' field.
   * joined bp-addr object
   * @param value the value to set.
   */
  public void setBpAddr(avro.ch.tkb.bde.JoinedBpAddrV2 value) {
    this.bpAddr = value;
  }

  /**
   * Creates a new BpAddrOrPersonAddrV2 RecordBuilder.
   * @return A new BpAddrOrPersonAddrV2 RecordBuilder
   */
  public static avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder newBuilder() {
    return new avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder();
  }

  /**
   * Creates a new BpAddrOrPersonAddrV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BpAddrOrPersonAddrV2 RecordBuilder
   */
  public static avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder newBuilder(avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder other) {
    if (other == null) {
      return new avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder();
    } else {
      return new avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder(other);
    }
  }

  /**
   * Creates a new BpAddrOrPersonAddrV2 RecordBuilder by copying an existing BpAddrOrPersonAddrV2 instance.
   * @param other The existing instance to copy.
   * @return A new BpAddrOrPersonAddrV2 RecordBuilder
   */
  public static avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder newBuilder(avro.ch.tkb.bde.BpAddrOrPersonAddrV2 other) {
    if (other == null) {
      return new avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder();
    } else {
      return new avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder(other);
    }
  }

  /**
   * RecordBuilder for BpAddrOrPersonAddrV2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BpAddrOrPersonAddrV2>
    implements org.apache.avro.data.RecordBuilder<BpAddrOrPersonAddrV2> {

    /** joined person-addr object */
    private avro.ch.tkb.bde.JoinedPersonAddrV2 personAddr;
    private avro.ch.tkb.bde.JoinedPersonAddrV2.Builder personAddrBuilder;
    /** joined bp-addr object */
    private avro.ch.tkb.bde.JoinedBpAddrV2 bpAddr;
    private avro.ch.tkb.bde.JoinedBpAddrV2.Builder bpAddrBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.personAddr)) {
        this.personAddr = data().deepCopy(fields()[0].schema(), other.personAddr);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPersonAddrBuilder()) {
        this.personAddrBuilder = avro.ch.tkb.bde.JoinedPersonAddrV2.newBuilder(other.getPersonAddrBuilder());
      }
      if (isValidValue(fields()[1], other.bpAddr)) {
        this.bpAddr = data().deepCopy(fields()[1].schema(), other.bpAddr);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasBpAddrBuilder()) {
        this.bpAddrBuilder = avro.ch.tkb.bde.JoinedBpAddrV2.newBuilder(other.getBpAddrBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing BpAddrOrPersonAddrV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.ch.tkb.bde.BpAddrOrPersonAddrV2 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.personAddr)) {
        this.personAddr = data().deepCopy(fields()[0].schema(), other.personAddr);
        fieldSetFlags()[0] = true;
      }
      this.personAddrBuilder = null;
      if (isValidValue(fields()[1], other.bpAddr)) {
        this.bpAddr = data().deepCopy(fields()[1].schema(), other.bpAddr);
        fieldSetFlags()[1] = true;
      }
      this.bpAddrBuilder = null;
    }

    /**
      * Gets the value of the 'personAddr' field.
      * joined person-addr object
      * @return The value.
      */
    public avro.ch.tkb.bde.JoinedPersonAddrV2 getPersonAddr() {
      return personAddr;
    }


    /**
      * Sets the value of the 'personAddr' field.
      * joined person-addr object
      * @param value The value of 'personAddr'.
      * @return This builder.
      */
    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder setPersonAddr(avro.ch.tkb.bde.JoinedPersonAddrV2 value) {
      validate(fields()[0], value);
      this.personAddrBuilder = null;
      this.personAddr = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'personAddr' field has been set.
      * joined person-addr object
      * @return True if the 'personAddr' field has been set, false otherwise.
      */
    public boolean hasPersonAddr() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'personAddr' field and creates one if it doesn't exist yet.
     * joined person-addr object
     * @return This builder.
     */
    public avro.ch.tkb.bde.JoinedPersonAddrV2.Builder getPersonAddrBuilder() {
      if (personAddrBuilder == null) {
        if (hasPersonAddr()) {
          setPersonAddrBuilder(avro.ch.tkb.bde.JoinedPersonAddrV2.newBuilder(personAddr));
        } else {
          setPersonAddrBuilder(avro.ch.tkb.bde.JoinedPersonAddrV2.newBuilder());
        }
      }
      return personAddrBuilder;
    }

    /**
     * Sets the Builder instance for the 'personAddr' field
     * joined person-addr object
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder setPersonAddrBuilder(avro.ch.tkb.bde.JoinedPersonAddrV2.Builder value) {
      clearPersonAddr();
      personAddrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personAddr' field has an active Builder instance
     * joined person-addr object
     * @return True if the 'personAddr' field has an active Builder instance
     */
    public boolean hasPersonAddrBuilder() {
      return personAddrBuilder != null;
    }

    /**
      * Clears the value of the 'personAddr' field.
      * joined person-addr object
      * @return This builder.
      */
    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder clearPersonAddr() {
      personAddr = null;
      personAddrBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bpAddr' field.
      * joined bp-addr object
      * @return The value.
      */
    public avro.ch.tkb.bde.JoinedBpAddrV2 getBpAddr() {
      return bpAddr;
    }


    /**
      * Sets the value of the 'bpAddr' field.
      * joined bp-addr object
      * @param value The value of 'bpAddr'.
      * @return This builder.
      */
    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder setBpAddr(avro.ch.tkb.bde.JoinedBpAddrV2 value) {
      validate(fields()[1], value);
      this.bpAddrBuilder = null;
      this.bpAddr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bpAddr' field has been set.
      * joined bp-addr object
      * @return True if the 'bpAddr' field has been set, false otherwise.
      */
    public boolean hasBpAddr() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'bpAddr' field and creates one if it doesn't exist yet.
     * joined bp-addr object
     * @return This builder.
     */
    public avro.ch.tkb.bde.JoinedBpAddrV2.Builder getBpAddrBuilder() {
      if (bpAddrBuilder == null) {
        if (hasBpAddr()) {
          setBpAddrBuilder(avro.ch.tkb.bde.JoinedBpAddrV2.newBuilder(bpAddr));
        } else {
          setBpAddrBuilder(avro.ch.tkb.bde.JoinedBpAddrV2.newBuilder());
        }
      }
      return bpAddrBuilder;
    }

    /**
     * Sets the Builder instance for the 'bpAddr' field
     * joined bp-addr object
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder setBpAddrBuilder(avro.ch.tkb.bde.JoinedBpAddrV2.Builder value) {
      clearBpAddr();
      bpAddrBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bpAddr' field has an active Builder instance
     * joined bp-addr object
     * @return True if the 'bpAddr' field has an active Builder instance
     */
    public boolean hasBpAddrBuilder() {
      return bpAddrBuilder != null;
    }

    /**
      * Clears the value of the 'bpAddr' field.
      * joined bp-addr object
      * @return This builder.
      */
    public avro.ch.tkb.bde.BpAddrOrPersonAddrV2.Builder clearBpAddr() {
      bpAddr = null;
      bpAddrBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BpAddrOrPersonAddrV2 build() {
      try {
        BpAddrOrPersonAddrV2 record = new BpAddrOrPersonAddrV2();
        if (personAddrBuilder != null) {
          try {
            record.personAddr = this.personAddrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("personAddr"));
            throw e;
          }
        } else {
          record.personAddr = fieldSetFlags()[0] ? this.personAddr : (avro.ch.tkb.bde.JoinedPersonAddrV2) defaultValue(fields()[0]);
        }
        if (bpAddrBuilder != null) {
          try {
            record.bpAddr = this.bpAddrBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("bpAddr"));
            throw e;
          }
        } else {
          record.bpAddr = fieldSetFlags()[1] ? this.bpAddr : (avro.ch.tkb.bde.JoinedBpAddrV2) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BpAddrOrPersonAddrV2>
    WRITER$ = (org.apache.avro.io.DatumWriter<BpAddrOrPersonAddrV2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BpAddrOrPersonAddrV2>
    READER$ = (org.apache.avro.io.DatumReader<BpAddrOrPersonAddrV2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.personAddr == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.personAddr.customEncode(out);
    }

    if (this.bpAddr == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.bpAddr.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.personAddr = null;
      } else {
        if (this.personAddr == null) {
          this.personAddr = new avro.ch.tkb.bde.JoinedPersonAddrV2();
        }
        this.personAddr.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bpAddr = null;
      } else {
        if (this.bpAddr == null) {
          this.bpAddr = new avro.ch.tkb.bde.JoinedBpAddrV2();
        }
        this.bpAddr.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.personAddr = null;
          } else {
            if (this.personAddr == null) {
              this.personAddr = new avro.ch.tkb.bde.JoinedPersonAddrV2();
            }
            this.personAddr.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bpAddr = null;
          } else {
            if (this.bpAddr == null) {
              this.bpAddr = new avro.ch.tkb.bde.JoinedBpAddrV2();
            }
            this.bpAddr.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










